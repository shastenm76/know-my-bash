#!/usr/bin/env python3

import readline
import os
import subprocess
from collections import deque

def read_bash_history():
    history_file = os.path.expanduser("~/.bash_history")
    commands = deque(maxlen=208)
    unique_commands = set()

    # Read the top 208 unique commands from bash history
    with open(history_file, "r") as file:
        for line in file:
            command = line.strip()
            if command not in unique_commands:
                unique_commands.add(command)
                commands.append(command)
                if len(commands) == 208:
                    break

    return commands, unique_commands

def copy_to_clipboard(text):
    try:
        # Use xclip to copy to clipboard on Linux
        subprocess.Popen(["xclip", "-selection", "c"], stdin=subprocess.PIPE).communicate(input=text.encode())
    except FileNotFoundError:
        # Use pbcopy to copy to clipboard on macOS
        subprocess.Popen(["pbcopy"], stdin=subprocess.PIPE).communicate(input=text.encode())
    except Exception as e:
        print(f"Failed to copy to clipboard: {e}")

def display_commands(commands, page_number, commands_per_page=26):
    start_index = (page_number - 1) * commands_per_page
    end_index = min(start_index + commands_per_page, len(commands))

    print(f"\nPage {page_number} - Recent Commands:")
    for i in range(start_index, end_index):
        print(f"{chr(ord('a') + i)}: {commands[i]}")

def main():
    commands, unique_commands = read_bash_history()
    commands_per_page = 26
    total_pages = (len(commands) + commands_per_page - 1) // commands_per_page
    current_page = 1

    while True:
        display_commands(commands, current_page, commands_per_page)

        # Get user input
        input_text = input("Enter letter (or press Enter to quit): ")

        # Check if the user pressed Enter without typing a character
        if not input_text:
            break

        # Check if the user entered a letter
        if input_text.isalpha() and len(input_text) == 1:
            index = ord(input_text.lower()) - ord('a') + (current_page - 1) * commands_per_page
            if 0 <= index < len(commands):
                selected_command = commands[index]
                copy_to_clipboard(selected_command)
                print(f"Command '{selected_command}' copied to clipboard.")
                break  # Exit the loop
            else:
                print("Invalid letter. Please enter a valid letter.")
        else:
            print("Invalid input. Please enter a single letter or press Enter to quit.")

if __name__ == "__main__":
    main()
